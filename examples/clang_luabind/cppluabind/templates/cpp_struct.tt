#include "SolLuaBindUtils.h"
#include <sol.hpp>

{%- for item in meta_data.relate_files %}	
#include "{{ item }}"
{%- endfor %}

namespace SolLuaBind
{
	void LuaBind_{{ meta_data.full_path|replace(".", "_") }}(lua_State *L)
	{
		struct LuaBindImpl
		{
			struct ForOverloadFns
			{
			{%- for overload_fn in meta_data.overload_fns %}
			{%- for item in overload_fn.fn_wraps%}
				{{ item.declare }}
				{
					{{ item.body }}
				}
			{%- endfor %}
			{%- endfor %}
			};

			static void DoLuaBind(lua_State *L)
			{
                std::string name = "{{ meta_data.spelling }}";
				std::string name_space = "{{ meta_data.space_path }}";

				{
					sol::usertype<{{ meta_data.full_path|replace(".", "::") }}> meta_table(
				{%- if meta_data.construct_fn_strs|length > 0 %}
						sol::constructors<
					{%- for item in meta_data.construct_fn_strs %}				
						{{ item }} {%- if meta_data.construct_fn_strs|last != item %},{%- endif %} 
					{%- endfor %}
						>(),
				{%-endif %}
						"__StructName__", sol::property([]() {return "{{ meta_data.spelling }}"; })

					{%- for item in meta_data.fields %}				
						,"{{ item.spelling }}", &{{ item.full_path|replace(".", "::") }}
					{%- endfor %}
					
					{%- for item in meta_data.fns %}				
						,"{{ item.spelling }}", &{{ item.full_path|replace(".", "::") }}
					{%- endfor %}
					
					{%- for item in meta_data.overload_fns %}				
						,"{{ item.name }}", {{ item.bind }}
					{%- endfor %}
					
						
				{%- if meta_data.base_classes|length > 0 %}	
					{%- for item in meta_data.base_classes %}				
						, sol::base_classes, sol::bases<
							{{ item }} {%- if meta_data.base_classes|last != item %},{%- endif %} 
						>()
					{%- endfor %}
				{%- endif %}
					);
					SolLuaBindUtils::BindLuaUserType(sol::state_view(L), meta_table, name, name_space);
				}
            
				{
					sol::table ns_table = SolLuaBindUtils::GetOrNewLuaNameSpaceTable(sol::state_view(L), name_space)[name];
				{%- for item in meta_data.vars %}				
					ns_table.set("{{ item.spelling }}", {{ item.full_path|replace(".", "::") }});
				{%- endfor %}
				}
			}
		};

		LuaBindImpl::DoLuaBind(L);
	}
}
