#include "SolLuaBindUtils.h"
#include <sol.hpp>

{%- for item in meta_data.relate_files %}	
#include "{{ item }}"
{%- endfor %}

namespace SolLuaBind
{
	void LuaBind_{{ meta_data.full_path|replace(".", "_") }}(lua_State *L)
	{
		struct LuaBindImpl
		{
			struct ForOverloadFns
			{
			{%- for overload_fn in meta_data.overload_fns %}			
			{%- for item in overload_fn.fn_wraps%}
			
			{%- for type_name, type_content in item.alias_types.items() %}
				using {{ type_name }} = {{ type_content }};
			{%- endfor %}
				{{ item.declare }}
				{
					{{ item.body }}
				}
			{%- endfor %}
			{%- endfor %}
			};
			
			struct ForPropertyField
			{
			{%- for property in meta_data.property_fields %} 
				
				using AliasType_{{ property.id }} = {{ property.desc.type_name }};
				static AliasType_{{ property.id}} & Get{{ property.desc.spelling }}({{ property.parent_type }} &cls)
				{
					return cls.{{ property.desc.spelling }};
				}
				static void Set{{ property.desc.spelling }}({{ property.parent_type }} &cls, AliasType_{{ property.id}} & p1)
				{
					cls.{{property.desc.spelling}} = p1;
				}
			
			{%- endfor %}
			};			
			

			static void DoLuaBind(lua_State *L)
			{
                std::string name = "{{ meta_data.spelling }}";
				std::string name_space = "{{ meta_data.space_path }}";

				{
					sol::usertype<{{ meta_data.full_path|replace(".", "::") }}> meta_table(
				{%- if meta_data.construct_fn_strs|length > 0 and not meta_data.is_abstract_struct %}
						sol::constructors<
					{%- for item in meta_data.construct_fn_strs %}				
						{{ item }} {%- if meta_data.construct_fn_strs|last != item %},{%- endif %} 
					{%- endfor %}
						>(),
				{%-endif %}
						"__StructName__", sol::property([]() {return "{{ meta_data.spelling }}"; })

					{%- for item in meta_data.fields %}				
						,"{{ item.spelling }}", &{{ item.full_path|replace(".", "::") }}
					{%- endfor %}
					
					{%- for item in meta_data.property_fields %}				
						,"{{ item.desc.spelling }}", sol::property(ForPropertyField::Get{{ item.desc.spelling }}, ForPropertyField::Set{{ item.desc.spelling }})
					{%- endfor %}
					
					{%- for item in meta_data.fns %}				
						,"{{ item.spelling }}", &{{ item.full_path|replace(".", "::") }}
					{%- endfor %}
					
					{%- for item in meta_data.overload_fns %}				
						,"{{ item.name }}", {{ item.bind }}
					{%- endfor %}
					
						
				{%- if meta_data.base_classes|length > 0 %}	
					{%- for item in meta_data.base_classes %}				
						, sol::base_classes, sol::bases<
							{{ item }} {%- if meta_data.base_classes|last != item %},{%- endif %} 
						>()
					{%- endfor %}
				{%- endif %}
					);
					SolLuaBindUtils::BindLuaUserType(sol::state_view(L), meta_table, name, name_space);
				}
            
				{
					sol::table ns_table = SolLuaBindUtils::GetOrNewLuaNameSpaceTable(sol::state_view(L), name_space)[name];
				
				{%- for item in meta_data.vars %}				
					{
						std::string var_name = "{{ item.spelling }}";
						sol::object obj = ns_table.raw_get_or(var_name, sol::nil);
						assert(!obj.valid());
						ns_table.set(var_name, {{ item.full_path|replace(".", "::") }});
					}
				{%- endfor %}
				}
			}
		};

		LuaBindImpl::DoLuaBind(L);
	}
}
