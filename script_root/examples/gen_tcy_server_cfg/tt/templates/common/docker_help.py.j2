

## network DockerNet
{% macro opt_network (network) -%}
--network {{network.name}}
{%- endmacro -%}


## net_used DockerNetUse
{% macro opt_ip (net_used) -%}
--ip {{net_used.fo_ip}}
{%- endmacro -%}


## volume DockerVolume
{% macro opt_mount (volume) -%}
--mount type=volume,src={{volume.name}},dst={{volume.map_path}}
{%- endmacro -%}


## volume_used DockerVolumeUse
{% macro cmd_mkdir_volume_used (volume_used, is_file) -%}
{%- if is_file -%}
mkdir -p `dirname {{volume_used.fo_abs_path}}`
{%- else -%}
mkdir -p {{volume_used.fo_abs_path}}
{%- endif -%}
{%- endmacro -%}

## volume_used DockerVolumeUse
{% macro cmd_rm_volume_used (volume_used) -%}
rm -rf {{volume_used.fo_abs_path}}
{%- endmacro -%}

## ssh_client str
## container_name str
## image str
## cmd str
## opt str
## volumes typing.List[DockerVolume]
## network typing DockerNet
## net_used DockerNetUse
{% macro run_container (ssh_client, container_name, image, cmd, opt="", volumes = None, network=None, net_used=None, publish_ports=None) -%}
with IndentFlag():
    opt_mount_volumes = []
    opt_mount_volumes.append("--mount type=bind,src=/tmp,dst=/root/tmp")
{%- if volumes -%}
{%- for e in volumes %}
    opt_mount_volumes.append("--mount type=volume,src={{e.name}},dst={{e.map_path}}")
{%- endfor -%}
{%- endif %}
    opt_publish_ports = []
{%- if publish_ports -%}
{%- for v in publish_ports %}
    # opt_publish_ports.append("--publish {{v.docker_port}}:{{v.machine_port}}/tcp")
    # opt_publish_ports.append("--publish {{v.docker_port}}:{{v.machine_port}}/udp")
{%- endfor -%}
{%- endif %}
{% if network %}    opt_network = "{{ opt_network(network) }}"{% else %}    opt_network = ""{% endif %}
{% if net_used %}    opt_ip = "{{ opt_ip(net_used) }}"{% else %}    opt_ip = ""{% endif %}
    run_cmd = "docker run {opt} --name {name} {network} {ip} {mount_volumes} {p_ports} {image} {command}".format(
        opt="{{opt}}", name="{{container_name}}", network=opt_network, ip=opt_ip, mount_volumes=" ".join(opt_mount_volumes), image="{{image}}",
        command=r"{{cmd}}", p_ports=" ".join(opt_publish_ports)
    )
    ret, out_txt, error_txt = paramiko_ssh_cmd({{ssh_client}}, run_cmd, exit_when_error=True)
    if 0 != ret:
        print("docker run: run docker container fail, cmd is {0}\n exit_code is {1}\n out is {2}\n error is {3}".format(run_cmd, ret, out_txt, error_txt))
        sys.exit(ret)
{%- endmacro -%}

## ssh_client str
## container_name str
{% macro kill_container (ssh_client, container_name) -%}
with IndentFlag():
    cmds = []
    cmds.append("docker container kill {name}".format(name="{{container_name}}"))
    cmds.append("docker container prune -f")
    paramiko_ssh_cmd({{ssh_client}}, cmds, exit_when_error=False)
{%- endmacro -%}

## ssh_client str
## image str
## cmds typing.List[str]
## volumes typing.List[DockerVolume]
## network typing DockerNet
{% macro exec_cmds (ssh_client, image,  cmds, volumes=None, network=None, print_fn_name=None) -%}
with IndentFlag():
    # run docker container
    import random
    ct_name = "ct_{}".format(random.randint(1, 99999999))
    opt_mount_volumes = []
    opt_mount_volumes.append("--mount type=bind,src=/tmp,dst=/root/tmp")
{%- if volumes -%}
{%- for e in volumes %}
    opt_mount_volumes.append("--mount type=volume,src={{e.name}},dst={{e.map_path}}")
{%- endfor -%}
{% endif %}
    {% if network -%}
    opt_network = "--network {{ network.name}}"
    {% else -%}
    opt_network = ""
    {% endif -%}
    run_cmd = "docker run -itd --name {name} {network} {mount_volumes} {image} {command}".format(
        name=ct_name, network=opt_network,  mount_volumes=" ".join(opt_mount_volumes), image="{{image}}", command="/bin/bash")
    ret, out_txt, error_txt = paramiko_ssh_cmd({{ssh_client}}, run_cmd)
    if 0 != ret:
        print("docker exec: run docker container fail, exit_code is {0}\nstd_out is {1}\nstd_error is {2}\n-------------\n".format(ret, out_txt, error_txt))
        sys.exit(ret)
    # execute cmds in docker contianer
{%- for e in cmds %}
    ret, out_txt, error_txt = paramiko_ssh_cmd({{ssh_client}}, "docker exec {name} {command}".format(name=ct_name, command=''' {{e}} '''))
    if 0 != ret:
        print("docker exec: run cmd fail, exit_code is {0}\nstd_out is {1}\nstd_error is {2}\n-------------\n".format(ret, out_txt, error_txt))
{%- if print_fn_name %}
    else:
        {{print_fn_name}}("docker exec: run cmd succ, exit_code is {0}\nstd_out is {1}\nstd_error is {2}\n-------------\n".format(ret, out_txt, error_txt))
{%- endif %}

{%- endfor %}
    # remove docker container
    paramiko_ssh_cmd({{ssh_client}}, [
        "docker container kill {0}".format(ct_name),
        "docker container prune -f",
    ])
{%- endmacro -%}


## ssh_client str
## image str
## to_docker_file_list typing.List[LocalAndDockerVolumeUse]
{% macro put_to_docker (ssh_client, image, to_docker_file_list, print_fn_name=None) -%}
{%- set volume_map = {} -%}
{%- for e in to_docker_file_list %}
    {%- do volume_map.update({e.volume_use.docker_volume.name: e.volume_use.docker_volume}) -%}
{%- endfor %}
{%- set run_cmd_list = [] -%}
{%- for e in to_docker_file_list %}
paramiko_sftp_put(ssh_client, '{{e.local_path}}', "/tmp/docker_put_to_data_{0}".format({{loop.index}}))
{%- set run_cmd = [
    cmd_mkdir_volume_used(e.volume_use, True),
    "cp -f /root/tmp/docker_put_to_data_%s %s "|format(loop.index, e.volume_use.fo_abs_path),
] -%}
{%- do run_cmd_list.extend(run_cmd) -%}
{%- endfor %}
{{ exec_cmds(ssh_client, image, run_cmd_list, volumes=volume_map.values(), print_fn_name=print_fn_name) }}
{%- endmacro -%}

## ssh_client str
## image str
## from_docker_file_list typing.List[LocalAndDockerVolumeUse]
{% macro get_from_docker (ssh_client, image, from_docker_file_list, print_fn_name=None) -%}
{%- set volume_map = {} -%}
{%- for e in from_docker_file_list %}
    {%- do volume_map.update({e.volume_use.docker_volume.name: e.volume_use.docker_volume}) -%}
{%- endfor %}
{%- set run_cmd_list = [] -%}
{%- for e in from_docker_file_list %}
{% set run_cmd = [
    "cp -f %s /root/tmp/docker_get_from_data_%s"|format(e.volume_use.fo_abs_path, loop.index),
] -%}
{%- do run_cmd_list.extend(run_cmd) -%}
{%- endfor %}
{{ exec_cmds(ssh_client, image, run_cmd_list, volumes=volume_map.values(), print_fn_name=print_fn_name) }}
{%- for e in from_docker_file_list %}
paramiko_sftp_get(ssh_client, "/tmp/docker_get_from_data_{}".format({{loop.index}}), '{{e.local_path}}')
{%- endfor %}
{%- endmacro -%}


## ssh_client str
## image str
{% macro copy_to_docker (ssh_client, image, volume_list, file_map, print_fn_name=None) -%}
{%- set volume_map = {} -%}
{%- for k, v in volume_list.items()() %}
    {%- do volume_map.update({k: v}) -%}
{%- endfor %}
{%- set run_cmd_list = [] -%}
{%- for k, v in file_map.items() %}
paramiko_sftp_put(ssh_client, '{{k}}', "/tmp/docker_put_to_data_{0}".format({{loop.index}}))
{%- set run_cmd = [
    cmd_mkdir_volume_used(v, True),
    "cp -f /root/tmp/docker_put_to_data_%s %s "|format(loop.index, v),
] -%}
{%- do run_cmd_list.extend(run_cmd) -%}
{%- endfor %}
{{ exec_cmds(ssh_client, image, run_cmd_list, volumes=volume_map.values(), print_fn_name=print_fn_name) }}
{%- endmacro -%}

## ssh_client str
## image str
{% macro copy_from_docker (ssh_client, image, volume_list, file_map, print_fn_name=None) -%}
{%- set volume_map = {} -%}
{%- for k, v in volume_list.items()() %}
    {%- do volume_map.update({k: v}) -%}
{%- endfor %}
{%- set run_cmd_list = [] -%}
{%- for k, v in file_map.items() %}
{% set run_cmd = [
    "cp -f %s /root/tmp/docker_get_from_data_%s"|format(k, loop.index),
] -%}
{%- do run_cmd_list.extend(run_cmd) -%}
{%- endfor %}
{{ exec_cmds(ssh_client, image, run_cmd_list, volumes=volume_map.values(), print_fn_name=print_fn_name) }}
{%- for k, v in file_map.items() %}
paramiko_sftp_get(ssh_client, "/tmp/docker_get_from_data_{}".format({{loop.index}}), '{{v}}')
{%- endfor %}
{%- endmacro -%}






