#include "SolLuaBindUtils.h"
#include <sol.hpp>

{%- for item in meta_data.relate_files %}	
#include "{{ item }}"
{%- endfor %}

namespace SolLuaBind
{
	void LuaBind_{{ meta_data.full_path|replace(".", "_") }}(lua_State *L)
	{
		struct LuaBindImpl
		{
			struct ForOverloadFns
			{
			{%- for overload_fn in meta_data.overload_fns %}			
			{%- for item in overload_fn.fn_wraps%}
			
			{%- for type_name, type_content in item.alias_types.items() %}
				using {{ type_name }} = {{ type_content }};
			{%- endfor %}
				{{ item.declare }}
				{
					{{ item.body }}
				}
			{%- endfor %}
			{%- endfor %}
			};

			static void DoLuaBind(lua_State *L)
			{
				std::string name_space = "{{ meta_data.full_path }}";

				sol::state_view lua(L);

				sol::table ns_table = SolLuaBindUtils::GetOrNewLuaNameSpaceTable(lua, name_space);
			
			{%- for item in meta_data.vars %}				
				{
					std::string name = "{{ item.spelling }}";
					sol::object obj = ns_table.raw_get_or(name, sol::nil);
					assert(!obj.valid());
					ns_table.set(name, {{ item.full_path|replace(".", "::") }});
				}
			{%- endfor %}
			
			{%- for item in meta_data.fns %}				
				{
					std::string name = "{{ item.spelling }}";
					sol::object obj = ns_table.raw_get_or(name, sol::nil);
					assert(!obj.valid());
					ns_table.set_function(name, {{ item.full_path|replace(".", "::") }});
				}
			{%- endfor %}

			{%- for item in meta_data.overload_fns %}				
				{
					std::string name = "{{ item.name }}";
					sol::object obj = ns_table.raw_get_or(name, sol::nil);
					assert(!obj.valid());
					ns_table.set_function(name, {{ item.bind }});
				}
			{%- endfor %}			
			}
		};

		LuaBindImpl::DoLuaBind(L);
	}
}
